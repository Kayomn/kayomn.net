{
	"title": "Git Overview: Gitting Started",
	"body": "I wrote this guide on getting started with Git for the student cohort at the University of Derby, and while some of it contains a few eccentricities specific to the university machines, I think it would be useful to have it propagated to one more place if only for posterity.\r\n\r\n## Getting Started\r\n\r\n### Terminology\r\n\r\nIf you're new to Git, or version control systems as a whole, some of the language used by people may be a bit confusing. This section intends to clear up any confusion between the variations of language used, and what people mean when they say them.\r\n\r\n  * Repository \/ Repo\r\n\r\n    An instance of the project. This can be prefixed with \"local\" or \"server \/ origin \/ remote\" in order to differentiate whether or not the repo in question is on someone's computer or they mean the primary repo stored on the server respectively.\r\n\r\n  * Branch\r\n\r\n    Functions like a \"sub-repository\" with changes specific to that branch of the project. A branch is typically created for a set of features or major change that will eventually be integrated into another branch, typically the master branch. Much like repositories, branches can be either local or server-side.\r\n\r\n  * Master Branch\r\n\r\n    Refers to the branch from which all branches originate from, either as direct descendants or grandchildren. Branches work like a family tree, where in which they can literally \"branch\" out.\r\n\r\n  * Merging\r\n\r\n    Once work is completed on a sub-branch, it is ready to be merged up into its direct parent branch. For example, take the following family tree.\r\n\r\n\t```\r\n\tMaster -> Development -> AI Development\r\n\t                      -> Interaction Development\r\n\t```\r\n\r\n\tIn this scenario, `AI Development` is awaiting to be merged into development. However, `Development` cannot yet be merged into `Master` because it still has pending work on the `Interaction Development` branch.\r\n\r\n  * Commiting\r\n\r\n    Changes to files are regularly saved to a repository in the form of \"commits\". Commits are per-file changes to a project that are recorded per-branch. The reason they are recorded is so that, if anything bad happens, it is easy to undo a commit for a given branch.\r\n\r\n  * Pushing\r\n\r\n    Commits are not automatically sent to a server, but are rather bundled up until the user deems it time to upload them in the form of a \"push\". When a push is made, it sends all of their new commits made after the last push to the remote repository's branch.\r\n\r\n\tPushing also synchronises locally created branches with the server, creating any new branches on the remote repository that do not yet exist on it.\r\n\r\n  * Pulling\r\n\r\n    Much like the literal definitions would imply, pulling changes is the antonym of pushing them. Git does not do anything you do not tell it to, including check for changes. Because of this, the only way to keep your local repository up to date with remote changes is to pull changes  from the server to your local branch.\r\n\r\n### User Interfaces\r\n\r\nIn order to get started using Git, you'll first want to decide which kind of UI you want to use. Git is a command line-based program and, as such, doesn't have any kind of graphical user interface inherently built into it. If you find you prefer GUIs over CLIs then it is recommended you look at one of the following front-ends for managing Git projects:\r\n\r\n  * Git Kraken\r\n\r\n    Out-of-the-box support for both regular Git and LFS-enabled Git repositories. As students of the University of Derby, you are entitled to an educational license which allows to access the full features of Git Kraken without spending any of your own money.\r\n\r\n  * TortoiseGit\r\n\r\n    TortoiseGit is the Git variant of TortoiseSVN, a popular version control frontend used prolifically in the professional developer industry.\r\n\r\n  * Tower\r\n\r\n    Tower offers a sleek frontend for Git with arguably the best integration for Git-LFS around, with support for diffing binary file assets like textures and models.\r\n\r\n## Making Changes\r\n\r\n### Step 1\r\n\r\nBefore changes can be made, a repository to work in will first be needed. This can be done by cloning it.\r\n\r\nNavigate to the directory you wish Git to download the repo to (keeping in mind that Git downloads everything into a folder itself) and clone it.\r\n\r\n```bash\r\ngit clone https:\/\/gitlab.com\/user-org\/repository.git\r\n```\r\n\r\nSyntactically, this command equates to...\r\n\r\n| Token                                          | Meaning                |\r\n| ---------------------------------------------- | ---------------------- |\r\n| git clone                                      | Download a repository  |\r\n| https:\/\/gitlab.com\/user-org\/repository.git | Repository URL         |\r\n\r\nOnce this command is entered into the command line, the Git for Windows credentials manager will appear. GitLab has security features built into private repositories, one of which is requiring authorisation to clone them.\r\n\r\nIn the `username` and `password` fields enter your GitLab account username and password credentials.\r\n\r\n### Step 2\r\n\r\nIt is recommend that all development be done on sub-branches of `master`, or alternatively a \"development\" branch, as `master` is deemed a protected branch by most Git. Furthermore, everyone contributing to the same branch would be a mess of chaos. To create a new branch to develop on you will need to use branching.\r\n\r\n```bash\r\ngit checkout -b development-your-branch-name-here development\r\n```\r\n\r\nSyntactically, this command equates to...\r\n\r\n| Token                             | Meaning            |\r\n| --------------------------------- | ------------------ |\r\n| git checkout                      | Checkout a branch  |\r\n| -b                                | It is a new branch |\r\n| development-your-branch-name-here | New branch name    |\r\n| development                       | Source branch name |\r\n\r\nAs a matter of convention, all branches that derive from `development` are prefixed with `development-`, hence why the example name is `development-your-branch-name-here` and not somply `your-branch-name-here`.\r\n\r\nIf you already have created a branch to work on, and you're trying to get back to it, you can instead use...\r\n\r\n```bash\r\ngit checkout development-your-branch-name-here development\r\n```\r\n\r\nAssuming `development-your-branch-name-here` is an existing branch recognised by the remote repository.\r\n\r\n### Step 3\r\n\r\nNow you're ready to write code and edit art assets. Go wild!\r\n\r\n## Submitting Changes\r\n\r\n### Step 1\r\n\r\nOnce you're done with the changes you've made for your work session, you'll want to commit them to your branch with `git add`.\r\n\r\nUnlike the previously mentioned commands, this one is a bit more tricky. Git add accepts any of the following permutations:\r\n\r\n  * `git add *`\r\n\r\n    Add literally every file that has been modified in any way since the repository was cloned. It is very rare that you will ever want to do this, as Unity itself modifies various files automatically whenever a project is opened in it.\r\n\r\n  * `git add file.txt`\r\n\r\n    Add `file.txt` to the files to be committed. Adding this file only does anything if it has been modified.\r\n\r\n\tIf this file is in a sub-folder it will need its full, relative path qualifying. I.e. `subfolder\/file.txt`.\r\n\r\n  * `git add *.txt`\r\n\r\n    Add all changed `.txt` files to the files to be committed.\r\n\r\n  * `git add sub\/*.txt`\r\n\r\n    Add all changed `.txt` files inside of the `sub` sub-folder to the files to be committed.\r\n\r\n  * `git add file1.txt file2.txt`\r\n\r\n    Multiple files can be specified in one go, using any combination of the previous variations to commit them.\r\n\r\nAdditionally, `git add` can be called as many times as is needed to incrementally add new files to be commited.\r\n\r\nOnce you're happy with the files queued you can begin committing.\r\n\r\n```bash\r\ngit commit -m \"Commit message\"\r\n```\r\n\r\nSyntactically, this command equates to...\r\n\r\n| Token            | Meaning                                 |\r\n| ---------------- | --------------------------------------- |\r\n| git commit       | Commit all queued files                 |\r\n| -m               | With the following message              |\r\n| \"Commit message\" | Message to be stored in the server logs |\r\n\r\n### Step 2\r\n\r\nWhile your changes have been submitted, they are not yet saved on the server. This is where pushing and pulling comes into play. In this case, we know there is pending data awaiting to be sent to the remote repo, so we can simply push.\r\n\r\n```bash\r\ngit push\r\n```\r\n\r\nIf you are not using a GUI that abstracts these commands, it is a good idea to periodically call `git pull` to pull any changes that other people have pushed. It will allow `git` to keep any files you're not currently modifying up to date with the latest ones.\r\n\r\n```bash\r\ngit pull\r\n```\r\n\r\n## Text Files\r\n\r\nGit was designed with support for text files from the outset. As such, things like source, Unity meta info, and configuration files are first-class citizens within Git.\r\n\r\n## Binary Files\r\n\r\nGit was originally designed to only handle text files. However, as software requirements have changed, version control support for binary files has become very important to a lot of projects.\r\n\r\nGit-LFS is a third-party plug-in for Git that adds support for \"large files\". Amoungst other things, \"large file support\" includes support for handling binary files. However, such support is limited only to optimising how Git stores them, and without a third-party diff-checking tool, identifying between which image files is the newer one is nigh-impossible.\r\n"
}
